"""
성능 테스트 스크립트
PyStitch360의 주요 기능 성능 측정
"""

import time
import psutil
import numpy as np
import cv2
from pathlib import Path
import sys

# 프로젝트 루트를 Python 경로에 추가
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.preprocessor import Preprocessor
from core.stitcher import Stitcher
from core.postprocessor import Postprocessor


class PerformanceMonitor:
    """성능 모니터링 클래스"""
    
    def __init__(self):
        self.start_time = None
        self.start_memory = None
        self.process = psutil.Process()
    
    def start(self):
        """측정 시작"""
        self.start_time = time.time()
        self.start_memory = self.process.memory_info().rss / 1024 / 1024  # MB
    
    def stop(self):
        """측정 종료 및 결과 반환"""
        elapsed_time = time.time() - self.start_time
        current_memory = self.process.memory_info().rss / 1024 / 1024  # MB
        memory_diff = current_memory - self.start_memory
        
        return {
            'elapsed_time': elapsed_time,
            'memory_usage': memory_diff,
            'current_memory': current_memory
        }


def create_test_images(width=1920, height=1080):
    """테스트용 이미지 생성"""
    # 실제 카메라 이미지와 유사한 패턴 생성
    left_image = np.random.randint(0, 255, (height, width, 3), dtype=np.uint8)
    right_image = np.random.randint(0, 255, (height, width, 3), dtype=np.uint8)
    
    # 일부 영역에 그라디언트 추가 (더 현실적인 이미지)
    for i in range(height):
        for j in range(width):
            left_image[i, j] = [i % 256, j % 256, (i + j) % 256]
            right_image[i, j] = [(i + 50) % 256, (j + 50) % 256, (i + j + 100) % 256]
    
    return left_image, right_image


def test_preprocessor_performance():
    """전처리 성능 테스트"""
    print("=" * 50)
    print("전처리 모듈 성능 테스트")
    print("=" * 50)
    
    preprocessor = Preprocessor()
    monitor = PerformanceMonitor()
    
    # 임시 테스트 디렉터리 생성
    import tempfile
    test_dir = Path(tempfile.mkdtemp())
    
    try:
        # 테스트 파일 생성 (100개)
        print("테스트 파일 생성 중...")
        for i in range(50):
            (test_dir / f"GOPR{i:04d}.MP4").touch()
            (test_dir / f"GP01{i:04d}.MP4").touch()
        
        # 파일 감지 성능 테스트
        monitor.start()
        left_files, right_files = preprocessor.detect_gopro_files(test_dir)
        result = monitor.stop()
        
        print(f"파일 감지 완료:")
        print(f"  - 감지된 파일: 좌측 {len(left_files)}개, 우측 {len(right_files)}개")
        print(f"  - 소요 시간: {result['elapsed_time']:.3f}초")
        print(f"  - 메모리 사용량: {result['memory_usage']:.2f}MB")
        
    finally:
        # 임시 파일 정리
        import shutil
        shutil.rmtree(test_dir)


def test_stitcher_performance():
    """스티처 성능 테스트"""
    print("\n" + "=" * 50)
    print("스티처 모듈 성능 테스트")
    print("=" * 50)
    
    stitcher = Stitcher()
    monitor = PerformanceMonitor()
    
    # 다양한 해상도로 테스트
    resolutions = [
        (1920, 1080, "Full HD"),
        (2560, 1440, "QHD"),
        (3840, 2160, "4K")
    ]
    
    for width, height, name in resolutions:
        print(f"\n{name} ({width}x{height}) 테스트:")
        
        # 테스트 이미지 생성
        left_image, right_image = create_test_images(width, height)
        
        # 왜곡 보정 테스트
        monitor.start()
        left_undistorted, right_undistorted = stitcher.undistort_images(left_image, right_image)
        result = monitor.stop()
        
        print(f"  왜곡 보정: {result['elapsed_time']:.3f}초, {result['memory_usage']:.2f}MB")
        
        # Equirectangular 투영 테스트
        test_panorama = np.random.randint(0, 255, (height, width * 2, 3), dtype=np.uint8)
        
        monitor.start()
        projected = stitcher.apply_equirectangular_projection(test_panorama, 3840, 1920)
        result = monitor.stop()
        
        print(f"  Equirectangular 투영: {result['elapsed_time']:.3f}초, {result['memory_usage']:.2f}MB")
        
        # 방향 조정 테스트
        monitor.start()
        oriented = stitcher.apply_orientation(projected, yaw=45, pitch=15, roll=10)
        result = monitor.stop()
        
        print(f"  방향 조정: {result['elapsed_time']:.3f}초, {result['memory_usage']:.2f}MB")


def test_postprocessor_performance():
    """후처리 성능 테스트"""
    print("\n" + "=" * 50)
    print("후처리 모듈 성능 테스트")
    print("=" * 50)
    
    postprocessor = Postprocessor()
    monitor = PerformanceMonitor()
    
    # 메타데이터 처리 테스트
    metadata = {
        "projection": "equirectangular",
        "title": "Performance Test Video",
        "description": "Generated by PyStitch360 Performance Test"
    }
    
    monitor.start()
    # 실제 파일이 없으므로 메타데이터 준비만 테스트
    metadata_args = []
    if metadata.get("projection") == "equirectangular":
        metadata_args.extend([
            '-metadata:s:v:0', 'spherical-video=1',
            '-metadata:s:v:0', 'stereo_mode=mono',
            '-metadata:s:v:0', 'projection=equirectangular'
        ])
    
    result = monitor.stop()
    
    print(f"메타데이터 준비: {result['elapsed_time']:.3f}초, {result['memory_usage']:.2f}MB")


def test_memory_usage():
    """메모리 사용량 테스트"""
    print("\n" + "=" * 50)
    print("메모리 사용량 분석")
    print("=" * 50)
    
    process = psutil.Process()
    initial_memory = process.memory_info().rss / 1024 / 1024
    
    print(f"초기 메모리 사용량: {initial_memory:.2f}MB")
    
    # 대용량 이미지 처리 시뮬레이션
    images = []
    for i in range(5):
        # 4K 이미지 생성
        large_image = np.random.randint(0, 255, (2160, 3840, 3), dtype=np.uint8)
        images.append(large_image)
        
        current_memory = process.memory_info().rss / 1024 / 1024
        print(f"이미지 {i+1} 생성 후: {current_memory:.2f}MB (+{current_memory - initial_memory:.2f}MB)")
    
    # 메모리 해제
    del images
    import gc
    gc.collect()
    
    final_memory = process.memory_info().rss / 1024 / 1024
    print(f"메모리 해제 후: {final_memory:.2f}MB")


def run_performance_tests():
    """모든 성능 테스트 실행"""
    print("PyStitch360 성능 테스트 시작")
    print(f"시스템 정보: {psutil.cpu_count()}코어, {psutil.virtual_memory().total / 1024 / 1024 / 1024:.1f}GB RAM")
    print()
    
    try:
        test_preprocessor_performance()
        test_stitcher_performance()
        test_postprocessor_performance()
        test_memory_usage()
        
        print("\n" + "=" * 50)
        print("성능 테스트 완료")
        print("=" * 50)
        
    except Exception as e:
        print(f"성능 테스트 중 오류 발생: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    run_performance_tests()